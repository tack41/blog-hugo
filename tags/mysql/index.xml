<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>mysql on tack41&#39;s blog</title>
    <link>https://blog.tack41.net/tags/mysql/</link>
    <description>Recent content in mysql on tack41&#39;s blog</description>
    <image>
      <url>https://blog.tack41.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.tack41.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 26 Mar 2022 00:00:00 +0900</lastBuildDate><atom:link href="https://blog.tack41.net/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>アルファメールプレミアでDBバックアップ</title>
      <link>https://blog.tack41.net/posts/2022/03/26_01/</link>
      <pubDate>Sat, 26 Mar 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2022/03/26_01/</guid>
      <description>TL;DR アルファメール(プレミア)ではshellの直接実行はできない。が、phpのexecを利用すればほぼ同じことができます。 経緯 自社のWEBサイトを大塚商会のアルファメールプレミアでMovable Typeを利用して運用しています。バックアップに関して、コンテンツファイルはFTP(over TLS)でCLIで取得できますが、DBに関してはphpMyAdminを利用してブラウザからボタンポチポチで取得していました。
WEBコンソールのメニューの中に「cron設定」という項目があるのに気づいて調べたところ、拡張子が「.cgi」または「.php」のファイルの一覧から選んで指定時刻に実行してくれるということのようでした。
こういうバッチ的な利用が可能なのであれば、execでOSコマンドも実行できるのでは、と思ってmysqldump叩いてみたところ実行できました。これはありがたいということで、AWS SDK for PHPのpackaged phar版をダウンロードしてS3へのアップロードまでできました。
注意事項として、認証情報をファイルから取得する場合、そのファイルを含むパスに認証をかけないと危険です。
定期的に実行したいというより、サイトを更新したときに実行できれば良いので、ブラウザで該当のphpファイルを直接呼び出しています。
phpMyAdminから手動でダウンロードしてS3にアップというのは地味に面倒なので、ブラウザ呼び出し一発でできるようになって工数削減できました。</description>
    </item>
    
    <item>
      <title>MariaDBのON UPDATE CURRENT_TIMESTAMPに対するUPDATEの動作について</title>
      <link>https://blog.tack41.net/posts/2018/11/13_01/</link>
      <pubDate>Tue, 13 Nov 2018 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2018/11/13_01/</guid>
      <description>リンク先同様、しばらく悩んでしまったのでメモ。
MySQLでON UPDATE CURRENT_TIMESTAMP で更新時にタイムスタンプを自動更新するように設定している場合でも、UPDATE前後で値に変化がなければタイムスタンプは更新されない。
[https://qiita.com/nao_tuboyaki/items/bef44862f6ddffd4f0b5][https://qiita.com/nao_tuboyaki/items/bef44862f6ddffd4f0b5)</description>
    </item>
    
    <item>
      <title>テーブル定義の移行でよく使う方法</title>
      <link>https://blog.tack41.net/posts/2017/11/30_01/</link>
      <pubDate>Thu, 30 Nov 2017 10:51:34 +0000</pubDate>
      
      <guid>https://blog.tack41.net/posts/2017/11/30_01/</guid>
      <description>社内DBを試行錯誤しているため、DB間データ移行の前段としてテーブル定義をコピーしたいことがある。 大抵のDBでは無料でもツールが充実しており、ODBCライブラリを入れればよっぽど問題ないと思うのだが&amp;hellip;
MySQL &amp;hellip; Workbench Oracle &amp;hellip; SQL Developer SQL Server &amp;hellip; SQL Server Management Studio(SSMS) Windows 10 Pro 64bitで、SSMSからOracleにアクセスしようとしたところ、どうにもエラーでうまく行かない。64bitのInstant Client + ODBCをインストールし、OSのODBC管理ツールでテスト接続は成功しているのだが&amp;hellip;
で、こういう時はAccessでODBC経由でリンクを貼る分にはまず失敗しない。この状態でテーブルをAccessにテーブル定義のみコピーし、そのAccessのテーブルをSSMSでインポートするとうまくいく。</description>
    </item>
    
    <item>
      <title>Dockerでstorageにoverlayを使う際の注意事項(2016/2時点,CentOS7)</title>
      <link>https://blog.tack41.net/posts/2016/02/09_02/</link>
      <pubDate>Tue, 09 Feb 2016 02:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2016/02/09_02/</guid>
      <description>Dockerでstorage driverにoverlayを使ってはまったこと。
2016/2時点 CentOS7でのdocker(1.8.2)においては、コンテナのファイルが2GBを超えると、読み込めなくなるようだ。
mariadbにて、dumpファイルの取り込みまでは問題ないのだが、これを一旦停止し、再度立ち上げようとすると「27: File too large」というメッセージが出て起動できない。 ググってみたところ、どうもこのメッセージはMariaDBというよりもOSが出しているようだ。そのことに気づいてoverlayをdevicemapperに戻したところ、現象は発生しなくなった。
開発者サイドでも、まだoverlayは何が起こるかわからない、というスタンスらしいので、要注意。</description>
    </item>
    
    <item>
      <title>Dockerでのmysql利用時の注意</title>
      <link>https://blog.tack41.net/posts/2016/02/09_01/</link>
      <pubDate>Tue, 09 Feb 2016 01:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2016/02/09_01/</guid>
      <description>Dockerでmysqlを利用する際にはまったこと。
Dockerfile等で初期データを流し込みたい場合、mysqld_safeを「バックグラウンド」で起動しておいてmysqlコマンドで流しこみを行うのだが、
nohup mysqld_safe &amp;amp; mysql -u root &amp;lt; init.sql のように実行してしまうと、 mysqlサーバが起動する前にコマンドが帰ってきてしまうため2行目で「mysql.sockがない」という旨のエラーが返ってきてしまう。
このような場合、1行目の後に以下のようなループを噛ませるとうまく行くはず。(bashの場合)
nohup mysqld_safe &amp;amp; for {1..10}; do if [ -e /var/lib/mysql/mysql.sock ]; then break fi sleep 1 done </description>
    </item>
    
  </channel>
</rss>
