<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>python on tack41&#39;s blog</title>
    <link>https://blog.tack41.net/tags/python/</link>
    <description>Recent content in python on tack41&#39;s blog</description>
    <image>
      <url>https://blog.tack41.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.tack41.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 29 Sep 2022 00:00:00 +0900</lastBuildDate><atom:link href="https://blog.tack41.net/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ChromebookでVisual Studio Code Server</title>
      <link>https://blog.tack41.net/posts/2022/09/29_01/</link>
      <pubDate>Thu, 29 Sep 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2022/09/29_01/</guid>
      <description>TL;DR Ansibleでvariableの存在チェックをしたい場合は var1 is defined and var1 is not none and var1 | length &amp;gt; 0 経緯 Ansibleのwhenで変数が定義されていて値が存在していたら実行したいケースがありました。
まず注意しなければいけないのは、この評価はPythonではなく、Jinja2で実行されるということ。このため
var1.length &amp;gt; 0 という表現は使えず
var1 | length &amp;gt; 0 とする必要があります。同様に
var1 is not None という表現は使えず(Jinja2エンジンではisはテストを指定するキーワードで、Noneというテストは存在しない。noneなら存在する)
var 1 is not none と指定する必要がある。
最初は、
var1 is defined and var1 | length &amp;gt; 0 くらいでやっていたのですが、変数は定義されているが値が未設定、という場合にvar1はNoneTypeという型になり、lengthが使えないため、最終的に
var1 is defined and var1 is not none and var1 | length &amp;gt; 0 という書き方に落ち着きました。</description>
    </item>
    
    <item>
      <title>pythonでSeleniumを利用する際の注意事項</title>
      <link>https://blog.tack41.net/posts/2022/09/21_01/</link>
      <pubDate>Wed, 21 Sep 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2022/09/21_01/</guid>
      <description>TL;DR pythonのDockerコンテナでSeleniumを実行したスクレイピングで色々はまった。 経緯 とあるサイトにログインして表示される情報をcronで取得したいと思い、pythonのDockerコンテナを利用してChrome,ライブラリ等をインストールしてプログラムを作成した。結構はまったポイントがあったので備忘のため記録する。
オプションが必要 --headless: まぁ当然 --no-sandbox: 利用するDockerコンテナがrootで動くために必要 --disable-dev-shm-usage: /dev/shmの容量不足でクラッシュするのを防ぐために必要(https://stackoverflow.com/questions/53902507/unknown-error-session-deleted-because-of-page-crash-from-unknown-error-cannot) --user-agent=Mozilla...: 今回アクセスしたサイトでは、ユーザーエージェントを変えないとForbiddenが返ってきた XPathによるアクセスはやめた方がよい 階層が深いと何やってるのかわからなくなるし、調査するのも大変。 find_element(By.ID,&amp;quot;...&amp;quot;)を使う。IDあればID、なければクラス名とか、AタグであればLINK_TEXTとか 該当のターゲットだけで一位にならないのであれば、一位となる上位の要素を取得してそこからfind_elementするとか 画面の描画をsleepで待つのはやめた方がよい 対象の要素があれば、以下のように取得する from selenium.webdriver.support.wait import WebDriverWait ele_email: WebElement = WebDriverWait(driver, timeout=TIMEOUT_PAGE_LOAD).until( lambda d: d.find_element(By.NAME,&amp;#34;some_name&amp;#34;)) 画面の描画完了待ちであれば、以下のように記述する WebDriverWait(driver, TIMEOUT_PAGE_LOAD).until( lambda d: d.execute_script(&amp;#39;return document.readyState&amp;#39;) == &amp;#39;complete&amp;#39;) sourceを確認しながら1画面ずつ進める 処理が進んでたと思ったらエラーページでした、だとつらいので。 logger.debug(driver.page_source) </description>
    </item>
    
    <item>
      <title>箱入り娘のプログラムを書いて思う</title>
      <link>https://blog.tack41.net/posts/2018/08/15_01/</link>
      <pubDate>Wed, 15 Aug 2018 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2018/08/15_01/</guid>
      <description>実家に帰った際に箱入り娘のパズルがあったのでやっていた。
https://ja.m.wikipedia.org/wiki/%E7%AE%B1%E5%85%A5%E3%82%8A%E5%A8%98_(%E3%83%91%E3%82%BA%E3%83%AB)
全然解けなかったが、プログラムで力技で解きたいと思い、やってみた 結論として、解けずに終わった。 Pythonで再帰関数で解こうとして、再帰呼び出しの上限に引っかかって30sほどでエラーとなった。 将棋などと比較すると取ることができる手ににかなりきつい制限があるので、全探索余裕と思ってしまったのだが、完全に間違っていた。 一応、盤面を都度記録し、同じ盤面になったらそれ以上は探索しないようにしたのだが、それでも解空間は大きかった。
まず、再帰による解法の選択について。現代のプログラムにおいては、上限の大きさは違えど再帰呼出の階数には制限がある。ので、対象としている問題で想定される階数に比較してプログラミング言語の制約が十分かどうか判断しなければいけなかった。あるいは、階数をパラメータとして保持しておき、起動時に何階層まで探索するか指定するような形にすればよかった。
再帰ではなく、盤面をメモリかファイルに記録し、都度記録から次の盤面を探してスタックを使用しない形にしても良かった。
そもそも論で行くと、パズルは頭の体操として娯楽としてあるもので、力技で解くことに意味あるのか? というのもある。
今回は、初めてPythonを使って割としっかりとしたプログラムが書けたので、練習として良かったということにした。</description>
    </item>
    
  </channel>
</rss>
