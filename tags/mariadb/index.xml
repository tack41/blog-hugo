<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>mariadb on tack41&#39;s blog</title>
    <link>https://blog.tack41.net/tags/mariadb/</link>
    <description>Recent content in mariadb on tack41&#39;s blog</description>
    <image>
      <url>https://blog.tack41.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.tack41.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 09 May 2023 00:00:00 +0900</lastBuildDate><atom:link href="https://blog.tack41.net/tags/mariadb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ZabbixをDockerコンテナで運用時の主キー設定</title>
      <link>https://blog.tack41.net/posts/2023/05/09_01/</link>
      <pubDate>Tue, 09 May 2023 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2023/05/09_01/</guid>
      <description>TL;DR Zabbixは6.0よりhistoryテーブルに主キーを使うようになりました。server,frontendのパフォーマンス向上とテーブルサイズ削減が見込めるようです。 https://www.zabbix.com/whats_new_6_0#performance_improvements 公式のDockerコンテナを運用している場合、DBコンテナは別なので/usr/share/zabbix-sql-scripts/mysql/history_pk_prepare.sqlがなく、以下から取得したところ、うまくいきました。 https://git.zabbix.com/projects/ZT/repos/rsm-scripts/browse/database/mysql/history_pk_prepare.sql 経緯 Zabbixのダッシュボードのシステム情報に、「データベースのヒストリテーブルが主キーを使用: いいえ」と表示されていることに気づきました。
調べたところ、Zabbix 6.0よりhistoryテーブルの主キーの使用に対応しているとのことでした。
https://www.zabbix.com/whats_new_6_0#performance_improvements
新規に6.0以降をインストールすれば自動で主キーが設定されるが、以前のバージョンのアップグレードの場合は手動で対応する必要があるようです。
https://www.zabbix.com/documentation/6.0/en/manual/appendix/install/db_primary_keys
弊社の環境は公式のDockerコンテナで運用してて、DBはMariaDBの公式Dockerコンテナを使用しています。「MySQL 8.0+ with mysqlsh」の手順に従って進めたところ、途中で指定されている「/usr/share/zabbix-sql-scripts/mysql/history_pk_prepare.sql」が見つかりません。
この手順は1つのサーバーにweb,server,DBをインストールする想定と思われます。公式のDockerコンテナのweb,serverをマウントしてファイル名で検索しても見つからず。
単体のZabbixサーバを構築してファイルを取り出すのも面倒だったのでいろいろ検索し、公式のリポジトリと思われる以下よりダウンロードして流し込んだところ、うまくいきました。
https://git.zabbix.com/projects/ZT/repos/rsm-scripts/browse/database/mysql/history_pk_prepare.sql</description>
    </item>
    
    <item>
      <title>Ansible Moleculeでテスト</title>
      <link>https://blog.tack41.net/posts/2022/09/27_03/</link>
      <pubDate>Tue, 27 Sep 2022 15:48:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2022/09/27_03/</guid>
      <description>TL;DR Ansible Moleculeでのテストの実装はコツがいる 経緯 Ansible MoleculeでAnsibleのroleをテストしたが、結構コツがいるようだったので、メモ。
まず、現時点(2022/9/27)で日本語で言及している記事自体が少ない。以下は参照にさせていただいた。
MoleculeでAnsibleのRoleをテストする - その１ Molecule 3を試す ポイントは以下。
以下の流れで行う(https://molecule.readthedocs.io/en/latest/getting-started.html#run-test-sequence-commands) molecule create (1.Dockerコンテナの生成、起動) molecule converge (2.対象ののロールの実行) molecule verify (3.テスト) molecule destroy molecule testで一連の動作をまとめて実行できるとの記載があるが、自分の環境ではverifyがされていないので利用していない 途中でコケたら、molecule loginでコンテナにログインして実際のコマンドを実行するなどして確認する 1.Dockerコンテナの生成、起動 molecule.ymlを設定する imageにてDockerコンテナのタグを指定する 例えばubuntu:22.04を指定した場合、python3がインストールされていないためにansibleの各種タスクが実行できずにコケる。また、sudoもインストールされていないため、該当のタスクがbecome: yesを指定しているとやはりコケる。対策としてcommandを指定する。 platforms: - name: instance image: ubuntu:22.04 command: - &amp;#34;apt update&amp;#34; - &amp;#34;apt install -y sudo python3&amp;#34; pre_build_image: true 2.対象ののロールの実行 converge.ymlを設定する&amp;hellip;が、通常初期値で問題ないはず。他のタスクも実行したい場合は修正が必要なのかも 3.テスト verify.ymlを設定する。 assertタグでうまくいけばTrueとなるよう設定する。ファイルの存在をチェックする場合は以下のような感じ - name: Register if file exists stat: path: &amp;#34;/path/to/file&amp;#34; register: path_to_file - name: Check if file exists ansible.</description>
    </item>
    
    <item>
      <title>MariaDB(MySQL)の設定ファイルは.cnf</title>
      <link>https://blog.tack41.net/posts/2022/09/27_02/</link>
      <pubDate>Tue, 27 Sep 2022 12:33:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2022/09/27_02/</guid>
      <description>TL;DR MySQL(MariaDB)の設定ファイルの拡張子は.cnf .confではだめ。includedirでもだめ。 経緯 サーバに直接インストールしていたZabbixを、Raspberry Pi4上のDockerコンテナに移行しました。以前x64上のDockerコンテナで稼働していたことがあるので構築はかんたんに済み、移行もOK。が、併せてZabbixのメジャーバージョンアップを行うとupgrade処理の途中でコケる。日本語を含むデータの変換で失敗している。
show variable like &#39;%char%&#39;を実行すると、system,clinentがlatinになってる&amp;hellip; 設定ファイルにはutf8mb4を設定しているのになぜか反映されない。
設定ファイルconf/custom.confを/etc/mysql/conf.dにマウントしていたのだが、VScodede拡張子を.cnfに変えるとVScode上でファイルの認識が変わり、コンテナを再起動すると文字コードが正しく認識された。
公式サイトを見ればわかる話ではあるのですが、htmlファイルを.html,.htmのどちらでも認識するのと同じ感覚で&amp;hellip;また、includedirに指定されたフォルダにおいていたので、読んでくれるだろうと思いこんでました。
この設定ファイルは以前Dockerコンテナで運用していた際に使用していたものでしたが、当時からバージョンアップがうまく行かない問題があり、これが原因だった可能性があります。
ちゃんと公式サイトを見ましょうというお話でした。</description>
    </item>
    
    <item>
      <title>DockerコンテナのMariaDBのメジャーバージョンアップ</title>
      <link>https://blog.tack41.net/posts/2022/06/25_01/</link>
      <pubDate>Sat, 25 Jun 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2022/06/25_01/</guid>
      <description>TL;DR Docker HubにあるMariaDBの公式イメージのメジャーバージョンアップを行う場合、環境変数MARIADB_AUTO_UPGRADEにnon-emptyな値に設定したほうがよい 経緯 Redmineで利用しているMariaDBのバージョンアップを行った。10.4.25から10.6.8に一気に上げた。
途中10.5.15を経由したのだが、その際に以下のメッセージが出たのが気になった。
redmine_db | 2022-06-25 05:16:20+00:00 [Note] [Entrypoint]: MariaDB upgrade (mysql_upgrade) required, but skipped due to $MARIADB_AUTO_UPGRADE setting Docker HubのMariaDB公式サイトを見に行くと確かに以下の記述がある。
Set MARIADB_AUTO_UPGRADE to a non-empty value to have the entrypoint check whether mysql_upgrade/mariadb-upgrade needs to run, and if so, run the upgrade before starting the MariaDB server. Before the upgrade, a backup of the system database is created in the top of the datadir with the name system_mysql_backup_*.</description>
    </item>
    
    <item>
      <title>MariaDBのWindow関数</title>
      <link>https://blog.tack41.net/posts/2020/06/03_01/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2020/06/03_01/</guid>
      <description>MariaDB: 10.4.12 にて
要約 MariaDB 10.4.12(2020/6/3時点で最新版の1マイナーバージョンだけ前)では、Window関数は ONLY_FULL_GROUP_BY で誤動作する。
内容 MariaDBでROW_NUMBER(), SUM() OVER() 等のWindow関数を使用すると以下のようなエラーが出る。
MySql.Data.MySqlClient.MySqlException: Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) with no GROUP columns is illegal if there is no GROUP BY clause Window関数に使用している列をGROUP BYに指定して支障がないところであればそれでクリアできるのだが、そうでないところはどうにもならない。 Window関数自体は10.2から有効なはずなのだが、以下の記事によると、AVGなど一部のWindow関数以外はONLY_FULL_GROUP_BY に対応していないらしい。
https://jira.mariadb.org/browse/MDEV-17785
実際、AVG関数はONLY_FULL_GROUP_BY 制約のもと、GROUP BYで指定しなくても問題なく動作する。ROW_NUMBER(), SUM() はダメ。早く対応してほしい&amp;hellip;</description>
    </item>
    
    <item>
      <title>LINQの遅延評価がマイナスに働くケース</title>
      <link>https://blog.tack41.net/posts/2020/05/30_01/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2020/05/30_01/</guid>
      <description>LINQに限らず遅延評価はパフォーマンスに対してプラスに働く、という説明が多いように思うが、劇的にマイナスに働くケースがあった。 商品の名前の先頭に応じてグループ分けし、残ったデータに対して同様にグループ分けする以下のようなコード
IEnumerable&amp;lt;T&amp;gt; left = .... var sub1 = left.Where(l =&amp;gt; l.StartsWith(&amp;#34;AB&amp;#34;)) left = left.Where(l =&amp;gt; sub1.All(s =&amp;gt; s.ID != l.ID)) var sub2 = left.Where(l =&amp;gt; l.StartsWith(&amp;#34;A&amp;#34;) left = left.Where(l =&amp;gt; sub2.All(s =&amp;gt; s.ID != l.ID)) var sub3 = left.Where(l =&amp;gt; l.StartsWith(&amp;#34;B&amp;#34;) left = left.Where(l =&amp;gt; sub3.All(s =&amp;gt; s.ID != l.ID)) ... このような分類が20弱続くケースで、1分たっても応答が返ってこない。 leftの型をIListとし、left = left.Where(l =&amp;gt; sub1.All(s =&amp;gt; s.ID != l.ID)).ToList()のように即時評価に書き換えると1秒せずに返ってくる。
デバッグ実行すると、left = left.Where(l =&amp;gt; sub1.All(s =&amp;gt; s.ID != l.</description>
    </item>
    
    <item>
      <title>GROUP BY省略時の弊害(MariaDB)</title>
      <link>https://blog.tack41.net/posts/2020/05/25_01/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2020/05/25_01/</guid>
      <description>MariaDB 10.4 にて
SQLでSELECT句に集計関数のみを指定する場合、GROUP BYは指定しなくても実行できる。 が、ヒットするレコードがない場合に全データnullのデータが1件返されてしまう。 GROUP BYに指定すれば0件が返されるので、明らかにヒットする場合を除いてGROUP BYは明示的に指定したほうがよさそう。</description>
    </item>
    
    <item>
      <title>WindowsのMariaDBメジャーバージョンアップ後の運用の注意</title>
      <link>https://blog.tack41.net/posts/2019/11/03_01/</link>
      <pubDate>Sun, 03 Nov 2019 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2019/11/03_01/</guid>
      <description>WindowsのMariaDBを10.2 -&amp;gt; 10.4のようにメジャーバージョンアップする場合について。
バージョンアップ自体は公式サイトの手順に従って行えば良い。インストーラにより、上記の場合はバイナリはC:\Program Files\MariaDB 10.4、データはC:\Program Files\MariaDB 10.2を参照するようになる。MySQLサービスの実行パスは
&amp;#34;c:\Program Files\MariaDB 10.4\bin\mysqld.exe&amp;#34; &amp;#34;--defaults-file=C:\Program Files\MariaDB 10.2\data\my.ini&amp;#34; &amp;#34;MySQL&amp;#34; のようになる。
で、時間があるのでデータもバイナリも10.4のフォルダにするためにバックアップを取得した上で10.4をアンインストール、再度10.4をインストールすると、サービスが起動しない。 原因は上記実行パスのサービスがアンインストール時も消されずに残ってしまうためのよう。 MariaDBをすべてアンインストールした状態でsc delete MySQLを実行して残ったサービスを削除し、再度インストールすると正しい実行パスのサービスのエントリが生成される。</description>
    </item>
    
    <item>
      <title>MariaDBのON UPDATE CURRENT_TIMESTAMPに対するUPDATEの動作について</title>
      <link>https://blog.tack41.net/posts/2018/11/13_01/</link>
      <pubDate>Tue, 13 Nov 2018 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2018/11/13_01/</guid>
      <description>リンク先同様、しばらく悩んでしまったのでメモ。
MySQLでON UPDATE CURRENT_TIMESTAMP で更新時にタイムスタンプを自動更新するように設定している場合でも、UPDATE前後で値に変化がなければタイムスタンプは更新されない。
[https://qiita.com/nao_tuboyaki/items/bef44862f6ddffd4f0b5][https://qiita.com/nao_tuboyaki/items/bef44862f6ddffd4f0b5)</description>
    </item>
    
    <item>
      <title>Access 2003からMariaDBに移行</title>
      <link>https://blog.tack41.net/posts/2018/08/19_01/</link>
      <pubDate>Sun, 19 Aug 2018 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2018/08/19_01/</guid>
      <description>内製のAccess 2003アプリを、DB部分はMariaDBに移行している。 フロントは.Net(C#)
ツールを使って工数を削減できないかと模索したが、以下のような正攻法で攻めるしかないと言う結論に達した。
Access側のテーブルにて、極力Not Null制約を適用する&amp;hellip; 後述のデータ移行クエリ実行の際、NullがあるとINSERT SELECT 文がこけるため、Nullの場合とそうで無い場合で別クエリを実行する必要が出てくるため。
文字列型は、NULL=空文字と考えて問題ない場合がほとんどと想定されるので、以下の手順を機械的に実行する。
文字列でない場合はNULLを置き換えるべき値が自明でない場合も多いので、一旦NULL値固定で移行し、列ごとに個別で移行(UPDATE DEST.COL=SRC.COL WHERE SRC.COL IS NOT NULL) 対象列の空文字を許可する。 該当列を更新する部分にてNULLの場合は空文字に置き換える処理を追加 画面のフォームがデータと連結していてSQLではなくDoCmdで処理している場合、後付でSQLを組み込むと競合エラーが面倒なので、単純にフォームの値をNz関数でNullを置換してやれば良い ウィザードに従って作成した画面などで、データ更新処理を明示的に記載されていない場合は、フォームの追加・更新前処理イベントにてNz関数を適用する UPDATE文で該当列のNULLを空文字に置換 該当列にNOT NULL制約を適用。 MariaDB側に、同一レイアウトのテーブルを新規作成。参照制約も実装。 MariaDBのODBCドライバをインストールし、対象のMariaDBをODBC登録。 AccessのリンクテーブルとしてMariaDBのテーブルを登録 AccessのテーブルからMariaDBのテーブルにデータを流し込む(INSERT SELECT)クエリを作成、初回の移行を行う。
参照整合性制約から、移行可能な順番がはっきりする。 MariaDBのデータに対してアクセスするフロントプログラムを作成する。 移行後のテーブルレイアウトそのものでプログラムの動作検証が可能。 フロントプログラムの作成が完了したら、MariaDBの全データをTruncateしてデータの本番移行を行う。 データ移行の逆順で実行しても参照整合性制約からデータを削除できない場合がある。素直に参照整合性制約を一時削除し、データの削除完了後に再度作成する。 テーブル名や列名にスペースやマルチバイト文字が入ってて命名規則を満たしていない、明らかに数量データなのに文字列型になっている&amp;hellip;といった問題はこれ以降にじっくりリファクタリングしていく。上記の手順とリファクタリングを同時に行うのはリスクが大きい。</description>
    </item>
    
    <item>
      <title>テーブル定義の移行でよく使う方法</title>
      <link>https://blog.tack41.net/posts/2017/11/30_01/</link>
      <pubDate>Thu, 30 Nov 2017 10:51:34 +0000</pubDate>
      
      <guid>https://blog.tack41.net/posts/2017/11/30_01/</guid>
      <description>社内DBを試行錯誤しているため、DB間データ移行の前段としてテーブル定義をコピーしたいことがある。 大抵のDBでは無料でもツールが充実しており、ODBCライブラリを入れればよっぽど問題ないと思うのだが&amp;hellip;
MySQL &amp;hellip; Workbench Oracle &amp;hellip; SQL Developer SQL Server &amp;hellip; SQL Server Management Studio(SSMS) Windows 10 Pro 64bitで、SSMSからOracleにアクセスしようとしたところ、どうにもエラーでうまく行かない。64bitのInstant Client + ODBCをインストールし、OSのODBC管理ツールでテスト接続は成功しているのだが&amp;hellip;
で、こういう時はAccessでODBC経由でリンクを貼る分にはまず失敗しない。この状態でテーブルをAccessにテーブル定義のみコピーし、そのAccessのテーブルをSSMSでインポートするとうまくいく。</description>
    </item>
    
    <item>
      <title>MariaDBからSQL Serverを直接参照するテーブルを作成</title>
      <link>https://blog.tack41.net/posts/2017/10/10_01/</link>
      <pubDate>Tue, 10 Oct 2017 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2017/10/10_01/</guid>
      <description>概要 Windows上のMariaDBからSQL Serverを直接参照するテーブルを作成します。Accessのリンクテーブル。 Connect Storageという機能を利用します。
経緯 社内データの保管に、以下の理由でSQL Serverを利用していました。
ODBCを設定せずにExcelから参照できる。 Windows認証を利用できるので、アプリで認証を考慮する必要がない。 後者に関しては、エラー時の対応等、逆にややこしくなりそうでメリットにならないと判断。ただ、前者を利用した、簡易BIとしてのExcelピボットテーブルファイルが利用されているため、うまく対応する必要がありました。
将来性を考えると、10GBに制限されるSQL Server Express Editionは避けたいところ。そこで、まずMariaDBサーバを立ててSQL Serverのデータを参照する形で運用を開始することにしました。
MariaDBには、異種データベースを参照するConnect Storage Engineという機能があることが分かり、これを利用して実装しました。
前提 OS: Windows Server 2008 R2 Maria DB: 10.2.9 SQL Server: SQL Server 2008 R2 Express Edition データベース名: DBTEST DBユーザー名: USERTEST, パスワード: PASSTEST テーブル名: TABLETEST 手順 管理ツールの「データソース(ODBC)」にて、SQL ServerへのDSNを登録(DSN名を「SQLSVR」とする)
MariaDBにmysqlクライアントで接続し、以下のコマンドでConnect Storage Engineを有効化する。
INSTALL SONAME &amp;#39;ha_connect&amp;#39; 以下のコマンドでConnect Storage Engine経由での参照を利用したテーブルエントリを作成する。
CREATE TABLE TABLETEST ENGINE=CONNECT DEFAULT CHARSET=cp932 TABLE_TYPE=ODBC CONNECTION=&amp;#39;DSN=SQLSVR;UID=USERTEST;PWD=PASSTEST&amp;#39;; 問題点 上記手順だと、該当のデータベースの一覧(show tables)まではできるが、内容を取得(select * from &amp;hellip;)できない。 SELECTしか必要ない場合においても、全データベースに対する全操作の権限(grant all on .</description>
    </item>
    
  </channel>
</rss>
