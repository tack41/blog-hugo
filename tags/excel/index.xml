<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>excel on tack41&#39;s blog</title>
    <link>https://blog.tack41.net/tags/excel/</link>
    <description>Recent content in excel on tack41&#39;s blog</description>
    <image>
      <url>https://blog.tack41.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.tack41.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 18 Mar 2023 00:00:00 +0900</lastBuildDate><atom:link href="https://blog.tack41.net/tags/excel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Excelで謎の肥大化</title>
      <link>https://blog.tack41.net/posts/2023/03/18_02/</link>
      <pubDate>Sat, 18 Mar 2023 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2023/03/18_02/</guid>
      <description>TL;DR Excelの容量肥大化では、以下の順に切り分けましょう 見た目で明らかにオブジェクトが詰め込まれていないか Ctrl+Endで、想定以上に広い範囲が指定されていないか [ホーム]-[選択]-[オブジェクトの選択と表示]で、想定以上のオブジェクトが表示されないか ちょっとしたプログラムをぱっと作るのにChatGPTは便利 経緯 あるExcelファイルが開くと動作が遅いのでなんとかならないかと問い合わせがありました。とりあえずファイル送ってもらい、調べました。
１ファイルで容量が3MBを超えており、かなり大きいです。数式が重いか、データが重いかで原因を考えていましたが、少なくとも後者は原因になりそうです。
シート数は2つ。行は1000近くまで行っているので小さくはないがそれほどでもない感じ。中にあるのは工程表で、罫線の表に線オブジェクトが多数という感じでむちゃくちゃ多いというほどでもない感じ。
この手の肥大化でよくあるのは、利用者が気づかないうちにデータが入力されているセルの範囲が広がってしまっているケース。この場合はスクロールバーがパット見の工程表の範囲よりも広く設定されいるかどうかでわかりますが、どうもそうではなさそうでしｇた。
一方のシートが見た目上データが多く、こちらのシートが原因かなと思い、少しずつ行を削除して切り分けていこうと考えました。が、とにかく動作が重い。別の画面にフォーカスを移して戻ってくるだけでマウスがくるくる回ります&amp;hellip; 上下にスクロールするのもしんどい感じ。
なんとか頑張って、複数ある工程表のうち、最初のものだけ残して他を削除しましたが、容量は大きいまま。で、この表を削除してもまだ容量は大きいままでした。オブジェクトの範囲選択で怪しそうな場所を選択しても、それらしいオブジェクトは無し。
そこで改めて[ホーム]-[選択]-[オブジェクトの選択と表示]を見ようとしたところ、表示までに5-10分かかり、大量のテキストボックスが表示されました、これだ&amp;hellip; 通常であればここで1つを選択した状態でCtrl+Aですべての図形を選択できるようなのですが、重すぎていつまで立っても選択が終わりません&amp;hellip;
色々試行錯誤したのですが、VBAでテキストボックスを削除してしまうのが手っ取り早そうだと考えました。こういったときに使ってみようと思ったのがChatGPT。Bingで使えるようになっているので、すべてのテキストボックスのオブジェクトを削除するVBAを聞いて返ってきた内容を微調整したのが以下
Sub DeleteTextBoxes() Dim ws As Worksheet Dim shp As Shape Dim n As Long Application.ScreenUpdating = False Application.Calculation = xlCalculationManual For Each ws In ThisWorkbook.Worksheets For Each shp In ws.Shapes Debug.Print &amp;#34;[&amp;#34; &amp;amp;ws.Name &amp;amp; &amp;#34;シートの処理を開始&amp;#34; &amp;amp; &amp;#34;]&amp;#34; If shp.Type = msoTextBox Then shp.Delete n = n + 1 Debug.Print n &amp;amp; &amp;#34;個目のテキストボックスを削除しました&amp;#34; Else Debug.</description>
    </item>
    
    <item>
      <title>Excelでオプションボタン</title>
      <link>https://blog.tack41.net/posts/2018/11/30_01/</link>
      <pubDate>Fri, 30 Nov 2018 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2018/11/30_01/</guid>
      <description>利用者が使い慣れたExcelでアンケートシートを作ろうとした際のこと。
どれか1つを選択してほしい場合は、オプションボタンを使う。開発タブにあり、フォームコントロールとActiveXの2つがある。
フォームコントロール
フォントの見た目がActiveXと比べればマシ。 グループ化するのに、グループポックスを使用しないといけない。 行や列の追加・削除でグループボックスに入ったり外れたりすると挙動が想定外となる レイアウト上、グループボックスが不要な場合は非表示にしないといけない。が、非表示にするとどこにあったかわからなくなる。 誤ってグループボックスが重なったりするとやはり想定外の挙動となる。 ActiveX
グループ化するのにグループ名を指定できるので、フォームのように想定外の動作をすることはない フォントの見た目がひどい。クリックしたときとそうでないときで大きさが変わる? 項目Aを選択し、項目Bを選択してさらに項目Aを選択&amp;hellip;と繰り返すと、どんどんフォントが大きくなる(致命的) プロパティ上のフォントサイズは変わっておらず、コントロールのサイズを変更すると直る。 当方では2013で発生。MSも認識はしているらしいが、対応作なし&amp;hellip; https://support.microsoft.com/ja-jp/help/417966
ActiveXのフォントが大きくなる不具合は致命的なので、グループボックスの位置に注意しながらフォームコントロールを使うことにした。 どちらの場合もだが、オプションボックスをセル内に収まるようにしないと、セルの追加で配置がずれてしまうので注意。</description>
    </item>
    
    <item>
      <title>Excelで「このワークシート内にある1つ以上の式の参照に問題が見つかりました」</title>
      <link>https://blog.tack41.net/posts/2018/08/03_01/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2018/08/03_01/</guid>
      <description>Excelで解決がとてもめんどくさいエラー。
このワークシート内にある１つ以上の式の参照に問題がみつかりました。数式内のセル参照、範囲名、定義名、および他のブックへのリンクがすべて正しいことをご確認ください。 Excel 2013で発生し、どう考えても参照する箇所がなくなるくらい該当シート、セルを削除しても保存のたびにエラーが出る。
で、一旦保存して終了して開き直すと出なくなることも&amp;hellip; 全てではないのだが、エラー箇所を修正しても保存して開き直すまでエラーが出続けることがあるらしい&amp;hellip; そもそも、エラーを出すのだからそのエラー箇所を素直に指摘してくれよと思うのだが&amp;hellip;</description>
    </item>
    
    <item>
      <title>C#でExcelのバージョンに依存しないCOM経由での操作</title>
      <link>https://blog.tack41.net/posts/2018/07/04_01/</link>
      <pubDate>Wed, 04 Jul 2018 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2018/07/04_01/</guid>
      <description>C#での社内プログラムでExcelを操作する際、大部分はClosedXMLを利用しているのだが、ActiveXを使用しているなどでうまく動作しない場合にはCOM経由で操作している。
Visual Studioで参照ツリーにExcelのCOM参照を追加するのだが、その時点でPCにインストールされているOfficeのバージョンに対応したCOMを追加する形になる。
ビルド時に参照ツリーにあるCOMを参照するため、参照追加時のPCとビルド時のPCでインストールされているOfficeのバージョンが異なると、ビルド時に警告、またはエラーとなる。
参照追加時には2013、ビルド時に2016だったためにビルド時に警告が出て、そのまま実行すると該当箇所でRuntime Errorでコケる事象が発生した。 社内には、今後2013, 2016が混在する予定のため、どちらかだけしか対応できないとなると困るので、対応方法を調査した。
参照ツリーに追加して開発する形式を事前バインディング、実行時にCOMの名前から該当のCOMを参照する形式を遅延(動的)バインディングというらしい。
事前バインディング Visual StudioでCOMオブジェクトの仕様を把握しているため、補完が効いて開発効率が高い 型情報なども取得済みでコンパイルするため、実行速度は遅延バインディングと比較して速い 使用するOfficeのバージョンを指定する必要がある。 遅延バインディング 使用するOfficeのバージョンを指定する必要がない Visual Studioでの補完は効かず、各オブジェクト、メソッドの情報を調べながら呼び出す必要がある。大変。 実行時に型チェックを行うため、遅い。実行時エラーが出る可能性も。 遅延バインディングは、各メソッドをInvokeMemberで引数を調査しながら呼び出す必要があり、とても大変。以下のサイトにこの大変さをWrapするコードが公開されていた。
https://zenmai.wordpress.com/2011/06/24/excel%E3%81%AE%E5%8F%82%E7%85%A7%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%9B%E3%81%9A%E3%81%ABexcel%E3%82%92%E4%BD%BF%E3%81%86c/
とても素晴らしいのでぜひ利用しようと考えたのだが、(当然ながら)COMオブジェクトのすべてが実装されているわけではないので不足個所を追加実装する必要があり、結構大幅な追加が必要と思われた。
で、たどり着いたのがこちらの記事。
https://teratail.com/questions/109579
なんと、dynamicという宣言に変更するだけで、ビルド時のチェックはやめて実行時に動的に呼び出してくれるとのこと。 (COMオブジェクトの生成部分は固有の書き方への変更が必要)。素晴らしい!!
実際にdyamicに変更したところ、WorkbookオブジェクトへのReleaseComObject呼び出し時にエラーが発生。
http://hiro-syumi.ldblog.jp/archives/36511362.html
こちらの記事を参照させてもらってエラー箇所のみobject型へのキャスト処理を追加したところ、問題なく動作するようになった。
このdynamicの利用だが、最初からこれを前提に行うと上記の通りVisualStudioによるサポートが効かないので開発効率はかなり落ちると思われる。今回のようにCOM参照を追加して事前バインディングで実装したうえで、dynamicに書き換えるという形が効率が良いと感じた。</description>
    </item>
    
    <item>
      <title>COM経由でのExcel操作は地獄?</title>
      <link>https://blog.tack41.net/posts/2018/02/24_01/</link>
      <pubDate>Sat, 24 Feb 2018 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2018/02/24_01/</guid>
      <description>VBAでExcelを操作するプログラムをC#に移行。 印刷に使用するActiveXオブジェクトを含む雛形ファイルを対象とするため、Managedな操作をするClosedXMLやNPOIではうまく動作せず、Interop.Excel経由で行った。
ClosedXML等と比較して圧倒的に動作が遅いのは当然として、シートをある程度(10枚以上?)コピーするとtmpファイルを書き込めない旨のエラーが発生する。 タイミングは実施するたびに違い、運が良ければエラーが発生しないこともある。
同様のエラーを探したが、結論としてはエラー時にリトライする処理を追加するくらいしかないらしい&amp;hellip;
https://answers.microsoft.com/ja-jp/msoffice/forum/msoffice_excel-mso_winother-mso_2010/vba%E3%81%A7%E3%82%B7%E3%83%BC%E3%83%88%E3%82%B3/b8b84a3e-d1f8-48a5-8623-04023c8510e8
こういった対処方法は、仕方ないとしても凹みますね。 機会があればネックとなっているActiveXオブジェクトをManagedな操作で置き換えていきたい。</description>
    </item>
    
    <item>
      <title>ClosedXMLの画像追加におけるWorksheetの取り扱いについて</title>
      <link>https://blog.tack41.net/posts/2017/11/07_01/</link>
      <pubDate>Tue, 07 Nov 2017 10:20:41 +0000</pubDate>
      
      <guid>https://blog.tack41.net/posts/2017/11/07_01/</guid>
      <description>C#でClosedXMLを使用してExcelに画像を追加する処理をしていた際、なぜかWorkbookの保存時にObjectDisposedExceptionが発生するという事態になりました。
以下のようなコードです
using (XLWorkbook wb = new XLWorkbook(filePath)) { IXLWorksheet ws_src = wb.Worksheet(&amp;#34;Template&amp;#34;); using (IXLWorksheet ws = ws_src.CopyTo(&amp;#34;1&amp;#34;)) { var image = ws.AddPicture(imagePath1); image.MoveTo(ws.Cell(3, 3).Address); image.Scale(.5); image = ws.AddPicture(imagePath2); image.MoveTo(ws.Cell(20, 3).Address); image.Scale(2); } using (IXLWorksheet ws = ws_src.CopyTo(&amp;#34;2&amp;#34;)) { var image = ws.AddPicture(imagePath3); image.MoveTo(ws.Cell(3, 3).Address); image.Scale(.5); } ws_src.Delete(); wb.Save(); } wb.Save() を実行すると例外が発生します。imageの処理をコメントアウトするとエラーは発生しません。
結論として、Worksheetを割り当てるusing句を外したところ、正常に動作するようになりました。エラー調査の際にOpenXMLのコードもちらっと見たのですが、おそらく画像を追加する際にいったんWorksheetの情報を更新して再割り当てするような処理が必要となります。usingを使っていると再割り当てができないのでエラーになったのではないかと。
ただ、エラー箇所がusing句の中ではなく、Saveを実行した場所というのはよくわからないのですが&amp;hellip; 再割り当てできない状態で内部変数をいろいろいじくって、それをファイルに保存する際にそれが検知されてエラーとなる、とかではないかと。
ClosedXMLのサンプルコードを見ていると、Workbookにusing句を使用するものはあるが、Worksheetに使用するものはほとんどない。WorkbookのDisposeで配下のすべてのリソースが解放されるので不要なのだろう。上記書き方が一般的ではないのかも。</description>
    </item>
    
  </channel>
</rss>
