<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>csharp on tack41&#39;s blog</title>
    <link>https://blog.tack41.net/tags/csharp/</link>
    <description>Recent content in csharp on tack41&#39;s blog</description>
    <image>
      <url>https://blog.tack41.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.tack41.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 21 Jul 2021 00:00:00 +0900</lastBuildDate><atom:link href="https://blog.tack41.net/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Accessの通貨型にはSystem.Decimal</title>
      <link>https://blog.tack41.net/posts/2021/07/21_01/</link>
      <pubDate>Wed, 21 Jul 2021 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2021/07/21_01/</guid>
      <description>TL;DR .Net FrameworkからAccessの通貨型の列に値を設定する場合は、System.Decimal型を利用する。
経緯 伝票番号が11桁の数値となるシステムにて、値をSystem.Int64型に格納していた。最終的にAccessのテーブルに格納する必要があり、こちらは通貨型で整数部11桁で定義していた。
OleDb経由でParameterを利用して(SQLにべた書きせずにobject型の変数として渡す)INSERTしたところ、何のエラーも吐かずにこけた。
どうも、System.Int64(=long)が渡されるとAccess側ではLong型(-2,147,483,648 ～ 2,147,483,647)に変換しようとするらしい。ただ、該当の列に「1L」(System.Int64型)を与えるとこけるが、「1」(System.Int32)ではこけないので、値そのものではなく型の違いによるエラーなのだと思われる。DEBUG実行してもエラーをはかずにこけるので切り分けに時間がかかった&amp;hellip;
相手が通貨型11桁なのでそれに合わせてよしなに変換してくれるものと思っていたが甘かった。が、前回同じコードを実行した際にはエラーは起きなかったはずなのだが&amp;hellip; 仕様が変わったのか?
まぁ、特にAccessのような(レガシーな?)システムとの接続の際には、自動変換には期待せずこちらで必要な型が分かる場合は指定したほうが無難だと理解した。</description>
    </item>
    
    <item>
      <title>テスト対象プロジェクトのコンテンツファイルが必要なテスト実行時の注意</title>
      <link>https://blog.tack41.net/posts/2020/06/18_02/</link>
      <pubDate>Thu, 18 Jun 2020 01:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2020/06/18_02/</guid>
      <description>要約 テスト対象プロジェクトのコンテンツファイルが存在することが必要となるテストを行う場合は、テストクラスに[DeploymentItem(@&amp;quot;Files\contents.xlsx&amp;quot;, &amp;quot;Files&amp;quot;)]の記述が必要
内容 Targetプロジェクトにて、Files\contents.xlsxをコンテンツ指定しており、これを利用する機能をTargetTestプロジェクトから実行する場合、何も考えずに実行するとFiles\contents.xlsxが見つからない旨のエラー(File or Directory Not found)が出る。
で、そのあとにテスト単体を個別に実行するとうまくいく。[選択して実行]と[すべてを実行]では実行パスが違い、前者では何も指定しなくてもコンテンツもコピーされるが、後者ではされないためのようだ。
[http://blog.livedoor.jp/nanoris/archives/51825230.html:embed:cite]
対応としては、TestClassのアノテーションの下にDeploymentItemのアノテーションを追加するとうまくいった。
[TestClass] [DeploymentItem(@&amp;#34;Files\contents.xlsx&amp;#34;, &amp;#34;Files&amp;#34;)]` public class TestClass{ ... ディレクトリ「Files」も指定しないとDirectoryNotFoundExceptionとなった。コンテンツファイルをテストプロジェクトにコピーする必要はない。</description>
    </item>
    
    <item>
      <title>MSTest の実行順番</title>
      <link>https://blog.tack41.net/posts/2020/06/18_01/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2020/06/18_01/</guid>
      <description>要約 MSTestは、複数クラスのメソッドを交互に実行しうる。これが困る場合は1つのクラスにまとめるべきかもしれない
内容 テストクラスAで更新系のテストをまとめてクラス初期化時にデータ整備を行い、テストクラスBで参照系のテストをまとめてテスト実行時にデータ整備を行っていた。
MSTestでは標準で並列実行はしないので問題ないと思っていたが、タイミングによって参照系のテストがこけることがあった。よくよく調べてみると、参照系のテストの一部が終わった状態で更新系のテストに移り、そこでデータが更新されてしまった状態で残りの参照系のテストが行われ、データが合わない状態だった。
並列実行しないというのはメソッド単位の話で、クラス単位のメソッドの実行順位が入れ子になることはあるようだ。成功したり、失敗したりするヤなパターンとなる。
対応として参照系、更新系を同一クラスにまとめ、全メソッドに対してメソッド実行時にデータ整備を行うこととした。
参照系のテストのみであればデータ整備はクラス初期化時でよいのだが、更新系が混ざる場合は参照系を含む全メソッドでメソッド実行時にデータ整備を行わないといけないということか。</description>
    </item>
    
    <item>
      <title>DataGridViewの列の並び順</title>
      <link>https://blog.tack41.net/posts/2020/06/08_01/</link>
      <pubDate>Mon, 08 Jun 2020 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2020/06/08_01/</guid>
      <description>Windows FormのDataGridView .Net Framework 4.7.2 にて
DataGridViewでDataSourceにDataTableを代入して利用する。
dataGridView1.DataSource = dt1; 1回目に列名2020/1,2020/2,2020/3,2020/4 の4つの列名を含むDataTableを設定。その後2019/10,2019/11,2019/12,2020/1 の4つを列名に含むDataTableを渡すと、重複する2020/1が 先頭に表示されてしまう。DataSource自体は全く別のオブジェクトなのだが、DataGridView側で前回のColumn情報を覚えていて、列名がマッチしたら使いまわしているのかもしれない。
対策としては、DataSourceに代入する前に
dtaGridView1.Columns.Clear(); を実行すればよい。</description>
    </item>
    
    <item>
      <title>IODATAのクラウドストレージ連携(S3)でエラー</title>
      <link>https://blog.tack41.net/posts/2020/03/26_01/</link>
      <pubDate>Thu, 26 Mar 2020 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2020/03/26_01/</guid>
      <description>IODATAのNASで利用しているクラウドストレージ連携でS3にバックアップしているのだが、今日、急に以下のようなエラーが出るようになった。
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;Error&amp;gt;&amp;lt;Code&amp;gt;AuthorizationHeaderMalformed&amp;lt;/Code&amp;gt;&amp;lt;Message&amp;gt;The authorization header is malformed; the region &amp;#39;us-east-1&amp;#39; is wrong; expecting &amp;#39;ap-northeast-1&amp;#39;&amp;lt;/Message&amp;gt;&amp;lt;Region&amp;gt;ap-northeast-1&amp;lt;/Region&amp;gt;&amp;lt;RequestId&amp;gt;...&amp;lt;/RequestId&amp;gt;&amp;lt;HostId&amp;gt;...=&amp;lt;/HostId&amp;gt;&amp;lt;/Error&amp;gt; NAS, S3側で特に設定変更はしていないのだが&amp;hellip; クラウドストレージ連携のバージョン1.28が2020/2/26にリリースされているようなので、これが自動更新されたのかもしれない。 https://www.iodata.jp/support/qanda/answer/s30471.htm
https://github.community/t5/GitHub-Actions/Cannot-get-an-AWS-Action-to-run-in-the-correct-region/td-p/17413
にあるように、既定で接続するとリージョンがus-east-1となり、ap-northeast-1リージョンのS3 bucketを操作しようとしてエラーとなっていると推測される。
対応として、詳細設定にあるエンドポイント指定にて、今まで未指定だったところに「s3.ap-northeast-1.amazonaws.com」を指定したところ、接続テストが成功することを確認。</description>
    </item>
    
    <item>
      <title>WindowsFormでイベントを駆使して入力チェック等を行う場合のポイント</title>
      <link>https://blog.tack41.net/posts/2019/12/24_01/</link>
      <pubDate>Tue, 24 Dec 2019 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2019/12/24_01/</guid>
      <description> すべてのイベントハンドラを一括で登録、削除する関数を作成する すべてのイベントハンドラの最初で削除し、最後に再登録する  イベントの多重起動(Leaveイベント内で別ControlのFocusを実行して再度Leaveが実行される、等)を防ぐにはこれが確実 関数のreturn部分が複数あって複雑な場合は、try-finallyのfinally内で再登録する イベントハンドラから呼び出す関数内で削除,登録処理を行うと、その関数の呼ばれ方によって再登録が多重に行われてしまう可能性がある。関数を使う場合もイベントハンドラの中で直接一括削除、再登録を行う  複数のイベントハンドラが同じ処理をする場合でも、別のイベントハンドラを直接呼び出す実装をすると上記を満たさず破綻する。共通部分を別関数に切り出して使用する。      </description>
    </item>
    
    <item>
      <title>DataRow.Field&lt;int&gt; とConvert.ToInt32 の違い</title>
      <link>https://blog.tack41.net/posts/2019/11/08_01/</link>
      <pubDate>Fri, 08 Nov 2019 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2019/11/08_01/</guid>
      <description>DataRow.FieldとConvert.ToInt32 の違いについて、 int がstringになった場合でも同様。
DataRowの値がDBNullかどうかで分ける場合に
var val = (dr[&amp;#34;name&amp;#34;] == DBNull.Value) ? &amp;#34;&amp;#34; : Convert.ToString(dr[&amp;#34;name&amp;#34;]) とやっていたのだが、
var val = dr.Field&amp;lt;int?&amp;gt;(&amp;#34;name&amp;#34;) ?? &amp;#34;&amp;#34; と書けるという記事を発見し、早速使ってみたのだが&amp;hellip;
Field版では、データがdecimalの場合にInValidCastExceptionが発生してしまう。値の範囲がintの範囲に収まっているかどうかは関係ない。 利用しているデータがdecimalの桁数指定で定義している箇所がほとんどという性質のため、これでは全く使えないと判明した&amp;hellip;
ただ、Convert.ToString(DBNull.Value) はstring.empty(空文字)に、Convert.ToInt32(DBNull.Value)は0になるので、これがOKであればこれが最も手っ取り早いとわかった。
DataRowのFieldやGetValueOrDefaultのようなジェネリクスメソッドは型変換の範囲が厳しく、逆にConvert系はおおらかなのだろう。</description>
    </item>
    
    <item>
      <title>Accessのレポート機能の活用</title>
      <link>https://blog.tack41.net/posts/2019/10/29_01/</link>
      <pubDate>Tue, 29 Oct 2019 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2019/10/29_01/</guid>
      <description>内製のシステムを、Accessベースから.Netに移行している。 その際に最大のネックになるのはレポート機能。
Accessのレポート機能は正直相当優秀だと思う。.Netの有償アプリで同等の機能を持つものを選定すると、開発者向けライセンスが100万レベルのものになってしまう。 それが、Officeの上位ライセンスに付属し、ランタイムだけなら無償で利用できる。
一方でネックはコードの開発生産性の低さ。VBAの文法は古めかしいし、何よりテキストではないのでGitで管理できない。
上記のいいとこ取りとして、Accessファイルのレポート機能だけを利用する方法を考えている。 Accessファイル側はレポートとレコードソースとなるテーブルのみ保持し、起動時にそのレポートが初期表示されるように設定しておく。
.Netのプロジェクト側では常に配布するコンテンツとしてAccessファイルを保持し、ADO経由でレコードソースとなるテーブルにデータを設定する。 その後外部プロセスとして該当のAccessを起動すると、レポートが表示される。 外部プロセスなので細かい制御はできないが、用途によっては十分だろう。
帳票数が多いアプリではきついかもしれないが、移行できない少数のレポートを活用する場合には十分かと思われる。</description>
    </item>
    
    <item>
      <title>NuGetライブラリ整理直後に謎のエラー</title>
      <link>https://blog.tack41.net/posts/2019/10/28_01/</link>
      <pubDate>Mon, 28 Oct 2019 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2019/10/28_01/</guid>
      <description>NuGetで使用するライブラリをVisualStuidoの管理画面より変更(削除-&amp;gt;追加)し、合わせて削除したライブラリに依存するライブラリを削除したところ、dllが存在しない旨を表すエラーが発生。 そのdllを見ると、削除したはずのdll。
App.configを見ると、その削除したはずのdllに関するdependentAssemblyエントリが合ったため、バックアップを取得した上で該当箇所を削除したところエラーは出なくなった。
Visual StudioでNugetライブラリを削除する場合には、設定ファイル(App.config)には連動されない場合があるらしい。</description>
    </item>
    
    <item>
      <title>Visual Studio 2017でReport Viewerの表示、編集ができない</title>
      <link>https://blog.tack41.net/posts/2019/10/04_01/</link>
      <pubDate>Fri, 04 Oct 2019 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2019/10/04_01/</guid>
      <description>Visual Studioで久しぶりにReport Viewerを編集しようとしたのだが、右クリックしても何も表示されない。 右上に右向きの矢印が表示されるはずなのだが、それもない&amp;hellip;
新しいフォームを作ってReportViewerをドロップしたところ、何も表示されない。
https://stackoverflow.com/questions/28179780/reportviewer-not-shown-on-form-designer-c-winform
を参考にInitializeComponentにコードを追加すると表示はされるが、やはり一切編集できない。
編集したい理由は、rdlcファイルを指定がエラーとなっていて編集し直したかったため。this.reportViewer1.LocalReport.ReportEmbeddedResource にrdlcファイルを直接指定する方法を試してみたが、GUIで指定したほうが有効になっているためか全く効かない。
最近.Net Coreのプロジェクトを作った際、Visual Studio CodeとIntellisenseがらみで干渉したため、いったんアンインストールしたことがあった。その際に設定がおかしくなったのかもしれない。 Visual StudioをいったんアンインストールしてOS再起動後にインストール。
Visual Studio 2017(Pro)をインストール後、拡張機能「Microsoft RDLC Report Designer」をインストール。 Microsoft.ReportingServices.ReportViewerControl.Winformsライブラリを、Visual Studio内のNuget管理画面にて、下げられる最低のバージョン140.337.80まで下げると編集メニューが表示される!!
ただ、既に作成済みのreportViewerはうまく動作しないため、いったん削除して同名で再作成して再配置。 その後、最新バージョンまで上げたが、正常に動作している。
一旦バージョンを下げることでキャッシュか何かがクリアされたのか? 原因不明。</description>
    </item>
    
    <item>
      <title>MySqlBulkLoaderでの取込結果が合わない</title>
      <link>https://blog.tack41.net/posts/2019/08/23_01/</link>
      <pubDate>Fri, 23 Aug 2019 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2019/08/23_01/</guid>
      <description>C#でMariaDBに接続する際にMySqlConnectorを利用している。
大量のデータを取り込む必要があったため、MySqlBulkLoaderで取り込んだところ、なんかゴミデータみたいのが入るうえに数字も合わない。 よくよく調べたところ、前段のCSV出力個所と、取込時の設定にミスがあった。
CSV出力時の改行の削除 CSV出力にはCSVHelper.CsvWriterを使用しているのだが、Fieldに改行があるとそのままCSVに出力される。CSVファイルは1行1データを前提としているので、ゴミデータが発生する原因になる。
csv.WriteField(col.ToString().Replace(&amp;#34;\r&amp;#34;, &amp;#34;&amp;#34;).Replace(&amp;#34;\n&amp;#34;, &amp;#34;&amp;#34;)) のように除去することで回避できた
FieldQuatationCharacterの設定 FieldTerminator, LineTerminator は普通に設定したのだが、FieldQuatationCharacter を設定しないと、CSVHelperがせっかく括弧で囲んでくれた中にカンマが含まれていると、そこで区切られてしまう。
mySqlBulkLoader.FieldQuotationCharacter = &amp;#39;&amp;#34;&amp;#39;; と指定することで回避できた。
MySqlConnector の MySqlBulkLoader は上記のような不具合で項目数など合わなくてもエラーなしで無理やり取り込むのが困ったところ&amp;hellip;</description>
    </item>
    
    <item>
      <title>IEnumerableで受けてIReadOnlyListで返すなら</title>
      <link>https://blog.tack41.net/posts/2019/08/09_01/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2019/08/09_01/</guid>
      <description>http://tack41tu.hatenablog.com/entry/2019/02/28/092329
で記載した方針を受けて、最近はCollectionに関してはIEnumerableで受けて、IReadOnlyListで返す基本方針としている。 一方で、プロパティの変更による予期せぬ誤動作を防ぐために、POCOについてはコンストラクタで初期とを設定し、setterを提供しないことでImmutableな形としている。
ただ、そうなるとCollectionもコンストラクタで渡す必要があるが、アルゴリズムの関係などでCollectionのメンバーは後で追加したいことがある。例えばDBからデータを取得して、鑑データの属性として明細データのCollectionを持たせる場合に、鑑データのclassをいったん生成した後、明細データを都度追加したいことが多い。要は短期間だけメンバーを追加したい。
POCOに渡すCollectionの参照を呼び出し側で保持し、鑑データのコンストラクタに渡した後で呼び出し側で持っているCollectionの参照をもとにメンバーを追加したのだが、なぜか反映されない。
結論としては、POCO内ではCollectionをListとして保持しており、コンストラクタでIEnumerableで受けた際に直ちにtoListで変換していた。これだとその時点でオブジェクトがコピーされてしまい、呼び出し側で持っている参照とは別物になってしまう。 そこで、IEnumerableで受けたオブジェクトは内部的にもIEnumerableで保持し、getterで参照された際にtoListしてIReadOnlyList型として返すことで解決した。こうすれば呼び出し側で持っている参照とPOCOで持っているクラスは全く同じとなり、呼び出し側でメンバーを追加、削除すればPOCOにも反映される。getterで参照する場合はそもそもIReadOnlyList型としてわたるのでメンバーの編集はできない。castすればできなくもないかもしれないが、少なくともそれは保証対象外という意図を明示できる。</description>
    </item>
    
    <item>
      <title>.netで利用可能な帳票ツール</title>
      <link>https://blog.tack41.net/posts/2019/06/28_01/</link>
      <pubDate>Fri, 28 Jun 2019 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2019/06/28_01/</guid>
      <description>内製開発している.net(C#)で利用可能な帳票ツールについて調査した。結論としては、高いお金を出さないとまともなツールは手に入らないということ。 価格はすべて税抜き。
使えるが、高い  Create!Form: 1帳票設計ライセンス200,000円、1WindowsServerランタイム400,000円。帳票ツールは使いやすそうで機能も十分そうだが、高い&amp;hellip; Active Reports for .Net 12.0: 1開発ライセンス300,000円、サーバーライセンス(2core)120,000円。Create!Formと同様、機能は十分だが高い&amp;hellip; iTextSharp: 保守されている最新のVer.7(iText)では、ライセンスがAGPLかCommercial License。Commercial Licenseの費用は見積もりを取らないとわからないっぽいが、このサイトによると、1920ポンド(26万程度).. JasperReport: Jaspersoft Studioという設計ツールで設計は簡単そう。.Netから利用しようとすると、Serverを立ててAPI経由での利用だがCommunity ServerのライセンスがAGPLか商用ライセンスの購入が必要。価格は見つけられなかったが、上記製品と同価格帯だろう。&amp;hellip; LibraryはLGPLなのに&amp;hellip; クライアントをJavaで開発するのは、今の自分の開発スキル的につらい、つらすぎる&amp;hellip;  安いが、あまり使えない  Reports.net: 1開発ライセンス60,000円、ランタイムは無料。ヘルプ等を見る限り、ヘッダ・フッタやグルーピングという概念がなく、すべての項目を項目名を指定して出力し、ページ送りも自分で行う感じに見える。Excelに自分で出力するのと大差ない。 VB-Report 8: 1開発ライセンス85,000円、ランタイムは無料。Reports.netよりもさらに原始的で、ひな形Excelのセル番号を指定して出力する感じ。ひな形ExcelにClosedXMLあたりで出力したほうが早いやん。 Access: 14,800円。ランタイムは無料。一部内製アプリで使用しているが、 VBAは見捨てられた言語だし、ソースコードはいったんExportする必要があり、かつ元のバイナリには戻せない。開発しづらい。  無料だが、つらい  [Microsoft ReportViewer]: Visual Studio Proに添付。どっちにしろうちの開発用途ではCommunityは使えないので。ただ、社内帳票でよくある、1明細が複数行にわたる場合に対応できない。 ClosedXML.Report: 無料。よさそうだが、こちらも、1明細が複数行にわたる場合に対応できないっぽい。 帳票.NET: 無料。最終リリースが2016年。継続性に不安 Excel: 全利用者に配布済みなので追加費用不要。ClosedXML等を利用して普通にセル指定で出力。プログラムで頑張ってセルを指定して出力するか、ひな形にてデータの表示とは別にデータの入力個所をまとめておいてプログラム側の負荷を下げるか、どちらにしてもめんどい。帳票の種類が増えてくるとつらさが増してくる。  まともなツールは1開発者でも300,000円から400,000円程度は最低でも必要なのだろう。が、中小企業においてこの金額はおいそれとは出ない。今後も継続的にバージョンアップする必要があるだろうし。 ひとまず、帳票部分のみAccessで開発、そのAccessを.netプログラムに同梱して帳票部分で呼び出す形にできないか調査、ダメならExcelのひな型をなるべく工夫する。あまりにつらくて上記費用が安いと感じられるようであれば購入を申請する形か。</description>
    </item>
    
    <item>
      <title>Get-ChildItemからのLengthプロパティでのファイル容量取得ではまる</title>
      <link>https://blog.tack41.net/posts/2019/06/25_01/</link>
      <pubDate>Tue, 25 Jun 2019 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2019/06/25_01/</guid>
      <description>PowerShellで特定のフォルダ配下に存在する一定容量以上のファイルをリストアップするスクリプトを作成。
Get-ChildItem -Recurse . | Where-Object{$_.Length -ge 10*1024*1024 } よくあるお題であちこちにサンプルがあるのだが、なぜかLengthプロパティがないというエラーが出る。
色々調べた結果、Set-Strictのversionを2以上にすると発生することが分かった。1の場合には存在しないプロパティでも無視することで動作するようだ。
http://winscript.jp/powershell/131
や
https://stackoverflow.com/questions/44035319/get-childitem-length-is-wrong
によると、対象がdirectoryの場合に配下のFileInfoとDirectoryInfo配列のサイズを返すところ、配下が1つのみの場合だと存在するFileInfo,またはDirectoryInfoのLengthを返そうとするためで、無理やり配列にすればいけるとあるが、ダメ。Directoryに対しては配下にファイルが無くても、何個あってもLengthプロパティへの問い合わせはエラーとなる。PowerShell Ver.5.1.17763.503 on Win10 1809(64bit)で確認。
結論としては、Directoryの中の個数をカウントしてもしょうがないので、対象をファイルのみにすることだった。
Get-ChildItem -Recurse -File . | Where-Object{$_.Length -ge 10*1024*1024 } これであれば、Set-StrictのVersionがlatestでも通る。</description>
    </item>
    
    <item>
      <title>ClosedXMLにて印刷範囲が設定され、「(」を含むシート名を保存するとファイルが壊れる</title>
      <link>https://blog.tack41.net/posts/2019/03/11_01/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2019/03/11_01/</guid>
      <description>ClosedXML 0.93.1, 0.94.2で確認。
印刷範囲を設定したファイルを開いて、「(」を含むシートを作成して保存すると、ファイルが壊れてしまいExcelでは開けなくなる。 workbook.xmlを見る限り、シート名をシングルクォーテーションでエスケープできていないのが問題のようだ。 再現ケースを確定してIssueに挙げるか。</description>
    </item>
    
    <item>
      <title>Form Load時にRadioButtonのCheckedChangedイベント発生</title>
      <link>https://blog.tack41.net/posts/2019/02/28_02/</link>
      <pubDate>Thu, 28 Feb 2019 01:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2019/02/28_02/</guid>
      <description>C# WinFormにてForm Load時にRadioButtonのCheckedChangedイベントが発生する事態に遭遇。 LoadイベントではCheckedをFalseにしているだけだし、他に怪しいイベントも見当たらない。
原因はTabStopが設定された、最小のTabIndexを持つフォームがRadioButtonになっていたため。</description>
    </item>
    
    <item>
      <title>C#でのCollection系オブジェクトの受け渡し指針</title>
      <link>https://blog.tack41.net/posts/2019/02/28_01/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2019/02/28_01/</guid>
      <description>C#でCollection系オブジェクト(IEnumerable, ICollection, IList等)の受け渡しをどうすべきか悩んでいた。 ListよりIList, EnumerableよりIEnumerableといった実装を含まないInterfaceが好ましいのは当然として、 あらゆるオブジェクトを想定してより抽象的なクラスを選択すべきというのは感覚的にわかるのだが、どうもしっくりこない。
以下の記事を見てなるほどと思った。 https://enterprisecraftsmanship.com/2017/05/24/ienumerable-vs-ireadonlylist/
言語に依存しない一般的な方針としては、Postel’s law.として知られる(初めて知った&amp;hellip;)
 be conservative in what you send, be liberal in what you accept, C#における具体的な方針として
prefer IEnumerable when accepting a collection; prefer IReadOnlyList when returning one. 確かに、引数は抽象的な方が使いやすいが、戻り値も抽象的だと結局toListしたりcastしたりしないといけないので使いにくいし、そもそもそんな使い方が正しいとは思えないので違和感があった。
IEnumerable - ICollection - IListという階層関係があるので、引数としてconservativeな(他の継承クラスも受け取れる)IEnumerableがよいというのはそのとおりだろう。 ただ、be liberal であるための解としてIReadOnlyListがあげられているが、これは利用側で内容を変更しないことがはっきりしている場合だろう。変更することが想定する場合はIListを返すべきと思われる。
複数のオブジェクトを格納する際には、IListの実装クラスがほとんどなので、これ以外を考慮する必要はとりあえずないと思われる。 DictionaryやHashtableを使う場合はIDictionaryあたりを返すのが妥当か?</description>
    </item>
    
    <item>
      <title>Ubuntuでmac方式のIME切り替え</title>
      <link>https://blog.tack41.net/posts/2019/01/16_02/</link>
      <pubDate>Wed, 16 Jan 2019 01:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2019/01/16_02/</guid>
      <description>macを使い始めて、IMEの切り替え方式をmac方式に切り替えています。Windows10ではIMEの設定をいじっていますが、近い将来mac方式が標準になるようです。
http://www.itmedia.co.jp/news/articles/1812/26/news094.html
Ubuntu 18.04でも変更することができました。
https://garabakos.sakura.ne.jp/Zlinux/lx061.htm</description>
    </item>
    
    <item>
      <title>C#におけるIEnumerable,IEnumerator</title>
      <link>https://blog.tack41.net/posts/2019/01/16_01/</link>
      <pubDate>Wed, 16 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2019/01/16_01/</guid>
      <description>IEnumerable(IEnumerator)はIListに比べると制約が多く、同じことをやろうとしても面倒、その分汎用性が高い、くらいに思ってました。
実際には、IEnumerableには要素の編集が一切できないのが最も大きな違いだと思います。
https://stackoverflow.com/questions/1210295/how-can-i-add-an-item-to-a-ienumerablet-collection
System.Linqを参照に追加すればIEnumerable.Appendが利用できますが、これはIList.Addとは違い非破壊的メソッドで自身は変更せずに要素を追加した新しいオブジェクトへの参照を返すだけです。 逆に言うと、一度設定したら編集しないCollectionを利用する場合はIEnumerableとして公開すればそとから編集されないことを保証できます。</description>
    </item>
    
    <item>
      <title>Bootstrapper().Run() 実行時にFileNotFoundException</title>
      <link>https://blog.tack41.net/posts/2018/10/09_01/</link>
      <pubDate>Tue, 09 Oct 2018 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2018/10/09_01/</guid>
      <description>WPFでPrsimを習得しようと日々格闘中です。
ふとしたタイミングで、Bootstrapper().Run()実行時に
&amp;#34;ファイルまたはアセンブリ &amp;#39;System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&amp;#39;、 またはその依存関係の 1 つが読み込めませんでした。指定されたファイルが見つかりません。 &amp;#34;:&amp;#34;System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&amp;#34; なるエラーが表示されて進まなくなってしまいました。 シンプルなShellのみ起動するように修正してもダメ。NuGetですべてのライブラリを一旦アンインストールし、最小限のみとして前に正常に起動した状態に戻してもダメ。
どうやら、app.configとターゲットバージョンにより発生(自分のプロジェクトでは4.7.2)するらしい。
https://github.com/dotnet/standard/issues/567
Workaroundsにあるようにapp.configのdependentAssemblyタグをすべて削除し、ターゲットバージョンを一旦4.0にして再度4.7.2に戻したところエラーが消えて動作するようになった&amp;hellip;</description>
    </item>
    
    <item>
      <title>WPFのMVVMについて考える</title>
      <link>https://blog.tack41.net/posts/2018/10/01_01/</link>
      <pubDate>Mon, 01 Oct 2018 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2018/10/01_01/</guid>
      <description>最近、Windows FormをやめてWPFのプログラムを書き始めている。
WPFは正直必要となる知識レベルが高く難しいというイメージで手が付けにくかった。今もそうだが。 何が難しいかといえば、MVVMの考え方をどこまで徹底するかに尽きるのではないかと思う。
MVVMについてまだまだ分からないことも多いが、今の認識をまとめる。
 MVVMは、ModelとViewの間にViewModelという層を挟み、ModelとViewの依存関係を疎にするモデル WPFの場合、ViewとViewModelの間でデータを複雑なコード不要でやりとりするBindingという機構があるので、うまく記述すればViewとViewModelの間も疎にできる そうすると、Model, ViewModelは変えずにViewだけ差し替えることも可能となる。 Windows Formの場合は、Viewの一部であるコードビハインドに処理もがっつり書いてしまうため、Viewだけ差し替えるということはできず結構な書き換えが必要となる。 Windows Formもそうだが、何も考えずに書くとどうしてもViewに処理を書いて肥大化しがち。そこで、ViewはViewModelの処理の呼び出しのみにする方が良いとされ、コードビハインドには極力コードを書かない方が良いとされる。 逆にViewModel側もViewに依存してしまうと別のViewに差し替えることができなくなるので、Viewに関するコードは書かない方が良いとされる。  MessageBoxのようなダイアログや、別のWindowを直接起動する処理すら良くないとされる。  じゃあどうするんだというと、Blendと言う部品や直接呼び出さずにInterface経由とすることで直接依存を避ける手段を取るべきとされる。これが初心者には超絶難解だと思う。     逆に、上記のようなViewを差し替える事態がそもそも考えなくて良いのであれば、今まで通りコードビハインドにコードを書いても問題はない。それでもWindows Formより洗練された部品が使えるのでメリットはある。  さしあたって、すぐに直面するのはViewModelからMessageBoxのような利用者への通知処理をどう行うか。行いたいのはMessageBoxを出すことではなく利用者にメッセージを伝えることと抽象化し、ShowMessageのようなメソッドをもつInterfaceを定義してこれを利用する形とする方法をとっている。以下のページが参考になった。
http://sourcechord.hatenablog.com/entry/2016/01/23/170753
このパターンは、コンストラクタに引き渡す処理に気をつければViewModelからのViewの呼び出しが簡単にできるため、よく使っています。</description>
    </item>
    
    <item>
      <title>ClosedXMLでWindows7だけレイアウトが崩れる</title>
      <link>https://blog.tack41.net/posts/2018/09/13_01/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2018/09/13_01/</guid>
      <description>アホな話です。
ClosedXMLで、一部コードでうっかり以下のようなコード書いてました。
 using (IXLWorkbook targetBook = new XLWorkbook(filePath))  {  using (IXLWorksheet targetSheet = targetBook.Worksheet(1))  {   }   targetBook.Save();  } usingの入れ子です。 普通、入れ子になるような階層があれば一番上位のクラスが下位のDispose呼んでくれるっと思いますよね〜。 でも、このときはusing句覚えたてで、とにかく使いたかったんです、using入れ子かっけ〜って思ってたんです&amp;hellip;
症状としては、Windows 7の場合のみシートのフォーマットが崩れます。なぜかWindows 10は大丈夫。OSによって症状が違う理由は不明。 sourceを見ると、XLWorksheetのDisposeでrange情報をクリアしてるっぽいから、そこで情報が消えて、そのまま保存すればそりゃレイアウトは崩れるな〜と。
追記) どうも、最新の0.93.1で発生し、0.92.0では発生しなかったようだ。ライブラリのバージョンアップした途端に大量に問い合わせが&amp;hellip;</description>
    </item>
    
    <item>
      <title>Microsoft Report使用時のビルド時の警告</title>
      <link>https://blog.tack41.net/posts/2018/07/30_02/</link>
      <pubDate>Mon, 30 Jul 2018 01:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2018/07/30_02/</guid>
      <description>Visual Studio 2017にてMicrosoft Reportを使用するために、Nugetで[Microsoft Rdlc Report Designer for Visual Studio]をインストールすると、ビルド時に「同じ依存アセンブリの異なるバージョン間での競合が見つかりました。」と警告が表示される。実行自体は問題なくできる。
https://qiita.com/hahifu/items/8dba20cd06fb0c3a9fa7
を参考に出力の詳細レベルを上げて確認すると、ReportのアセンブリがSQLServer.Typesの12.0.0に依存している一方で、NugetでReportインストール時に一緒にインストールされるSQLServer.Typesは14.0.0であるためのようだ&amp;hellip;
依存関係の解消方法が思い付かず、また動作には影響はないため以下のサイトを参考に
https://docs.microsoft.com/ja-jp/dotnet/framework/configure-apps/how-to-enable-and-disable-automatic-binding-redirection
自動バインド リダイレクトを有効化したところ、警告は出なくなった。</description>
    </item>
    
    <item>
      <title>ClickOnceでハマる</title>
      <link>https://blog.tack41.net/posts/2018/07/30_01/</link>
      <pubDate>Mon, 30 Jul 2018 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2018/07/30_01/</guid>
      <description>C#で開発したクライアントアプリケーションをClickOnceで配布する際にハマった2点
Windows10へのインストール イントラのファイルサーバに置いてある証明書が設定されていないClickOnceをWindows 10で実行すると、「コンピューターにセキュリティ上の問題を発生させるため、管理者がこのアプリケーションをブロックしました。&amp;hellip;」と表示され、[閉じる]ボタンしか表示されないために、インストールができない。 Windows 7では普通にインストールできる。
https://answers.microsoft.com/ja-jp/windows/forum/apps_windows_10-winapps-appscat_tools/%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC/45f6621c-35ca-4395-bdd4-685705e9fae0
にあるレジストリの[LocaIntranet]の値をEnabledにする必要があった。 設定変更は直ちに反映される(OS再起動は不要)
関連アセンブリの添付 上記をクリアしたうえでClickOnceを公開し、クライアントで実行すると以下のエラーが表示される。
このアプリケーションをインストールまたは実行できません。このアプリケーションでは、まずグローバルアセンブリキャッシュ(GAC)にアセンブリ Microsoft.**** バージョン *** をインストールする必要があります。 ****にはVisualStudio関連のアセンブリ各種が出力される。Visual Studio 2017 Express Desktopの時は発生しなかったのだが、2017 Professionalにしたら発生した。 どうも必要なアセンブリ(.dll)を添付できていないようで、事例は異なるが、
http://thinkami.hatenablog.com/entry/2014/09/09/062440
にあるように公開設定で全てのアセンブリを「必須コンポーネント(自動)」→「含む」に変更すると解消した。</description>
    </item>
    
    <item>
      <title>実行順序に依存する複数LINQ実行時の遅延評価による副作用</title>
      <link>https://blog.tack41.net/posts/2018/07/19_01/</link>
      <pubDate>Thu, 19 Jul 2018 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2018/07/19_01/</guid>
      <description>例えば、LINQ1にて元データよりデータを抽出し、これをデータセット1とする。 次に、LINQ2にて、元データからデータセット1を除いたデータセットに対して抽出し、これをデータセット2とする。 これをLINQ3にて、元データからデータセット1とデータセット2を除いたデータセットに対して抽出し、これをデータ・セット3とする。 &amp;hellip;.
上記のような処理を1メソッドで行う。 後続のLINQで除外するために、除外するためのデータセットを例えばListとして保持する。
LINQ2はLINQ1の結果が決まらないと決まらない。LINQ3はLINQ2, LINQ1の結果が決まらないと決まらない。だが、後続のLINQに対して結果を伝えるのは(LINQとは無関係の)Listオブジェクト。
このような場合に、上記LINQを順番にコードで記載したとしても、除外Listの値は後続に伝わらない(ことがある?)。おそらく、プログラムの動作として最初にLINQ3の結果を参照した場合にLINQ1,LINQ2の結果を行ってから、という動きはしてくれず、結果、空の除外Listに対してLINQ3を実行してしまっているためと思われる。
遅延されるのが問題なので、LINQの実行結果 IEnumerable型のオブジェクトに対してToList()を実行してやれば即時に確定してこのような副作用は発生しなくなる。遅延評価のメリットは当然なくなるが。</description>
    </item>
    
    <item>
      <title>C#でExcelのバージョンに依存しないCOM経由での操作</title>
      <link>https://blog.tack41.net/posts/2018/07/04_01/</link>
      <pubDate>Wed, 04 Jul 2018 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2018/07/04_01/</guid>
      <description>C#での社内プログラムでExcelを操作する際、大部分はClosedXMLを利用しているのだが、ActiveXを使用しているなどでうまく動作しない場合にはCOM経由で操作している。
Visual Studioで参照ツリーにExcelのCOM参照を追加するのだが、その時点でPCにインストールされているOfficeのバージョンに対応したCOMを追加する形になる。
ビルド時に参照ツリーにあるCOMを参照するため、参照追加時のPCとビルド時のPCでインストールされているOfficeのバージョンが異なると、ビルド時に警告、またはエラーとなる。
参照追加時には2013、ビルド時に2016だったためにビルド時に警告が出て、そのまま実行すると該当箇所でRuntime Errorでコケる事象が発生した。 社内には、今後2013, 2016が混在する予定のため、どちらかだけしか対応できないとなると困るので、対応方法を調査した。
参照ツリーに追加して開発する形式を事前バインディング、実行時にCOMの名前から該当のCOMを参照する形式を遅延(動的)バインディングというらしい。
 事前バインディング  Visual StudioでCOMオブジェクトの仕様を把握しているため、補完が効いて開発効率が高い 型情報なども取得済みでコンパイルするため、実行速度は遅延バインディングと比較して速い 使用するOfficeのバージョンを指定する必要がある。   遅延バインディング  使用するOfficeのバージョンを指定する必要がない Visual Studioでの補完は効かず、各オブジェクト、メソッドの情報を調べながら呼び出す必要がある。大変。 実行時に型チェックを行うため、遅い。実行時エラーが出る可能性も。    遅延バインディングは、各メソッドをInvokeMemberで引数を調査しながら呼び出す必要があり、とても大変。以下のサイトにこの大変さをWrapするコードが公開されていた。
https://zenmai.wordpress.com/2011/06/24/excel%E3%81%AE%E5%8F%82%E7%85%A7%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%9B%E3%81%9A%E3%81%ABexcel%E3%82%92%E4%BD%BF%E3%81%86c/
とても素晴らしいのでぜひ利用しようと考えたのだが、(当然ながら)COMオブジェクトのすべてが実装されているわけではないので不足個所を追加実装する必要があり、結構大幅な追加が必要と思われた。
で、たどり着いたのがこちらの記事。
https://teratail.com/questions/109579
なんと、dynamicという宣言に変更するだけで、ビルド時のチェックはやめて実行時に動的に呼び出してくれるとのこと。 (COMオブジェクトの生成部分は固有の書き方への変更が必要)。素晴らしい!!
実際にdyamicに変更したところ、WorkbookオブジェクトへのReleaseComObject呼び出し時にエラーが発生。
http://hiro-syumi.ldblog.jp/archives/36511362.html
こちらの記事を参照させてもらってエラー箇所のみobject型へのキャスト処理を追加したところ、問題なく動作するようになった。
このdynamicの利用だが、最初からこれを前提に行うと上記の通りVisualStudioによるサポートが効かないので開発効率はかなり落ちると思われる。今回のようにCOM参照を追加して事前バインディングで実装したうえで、dynamicに書き換えるという形が効率が良いと感じた。</description>
    </item>
    
    <item>
      <title>COM経由でのExcel操作は地獄?</title>
      <link>https://blog.tack41.net/posts/2018/02/24_01/</link>
      <pubDate>Sat, 24 Feb 2018 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2018/02/24_01/</guid>
      <description>VBAでExcelを操作するプログラムをC#に移行。 印刷に使用するActiveXオブジェクトを含む雛形ファイルを対象とするため、Managedな操作をするClosedXMLやNPOIではうまく動作せず、Interop.Excel経由で行った。
ClosedXML等と比較して圧倒的に動作が遅いのは当然として、シートをある程度(10枚以上?)コピーするとtmpファイルを書き込めない旨のエラーが発生する。 タイミングは実施するたびに違い、運が良ければエラーが発生しないこともある。
同様のエラーを探したが、結論としてはエラー時にリトライする処理を追加するくらいしかないらしい&amp;hellip;
https://answers.microsoft.com/ja-jp/msoffice/forum/msoffice_excel-mso_winother-mso_2010/vba%E3%81%A7%E3%82%B7%E3%83%BC%E3%83%88%E3%82%B3/b8b84a3e-d1f8-48a5-8623-04023c8510e8
こういった対処方法は、仕方ないとしても凹みますね。 機会があればネックとなっているActiveXオブジェクトをManagedな操作で置き換えていきたい。</description>
    </item>
    
    <item>
      <title>AccessにOleDbアクセス時、日付型のパラメータを使用する場合は型を明示する必要あり</title>
      <link>https://blog.tack41.net/posts/2018/02/20_01/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2018/02/20_01/</guid>
      <description>はまった&amp;hellip; Accessのときのみ発生。
Parameterを使う際、通常、設定した値の型からよきにはからって処理してくれるが、AccessでDateTime、特に時刻部分が設定されている場合ではエラーとなる。
http://yan-note.blogspot.jp/2008/08/systemdatacommondbparameteraccessdate.html</description>
    </item>
    
    <item>
      <title>C#でのDbTransaction.Rollback</title>
      <link>https://blog.tack41.net/posts/2018/02/02_01/</link>
      <pubDate>Fri, 02 Feb 2018 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2018/02/02_01/</guid>
      <description>C#のTransactionにて、DbTransactionをusing句で使えば、Disposeの際にRollbackされるので、明示的なRollbackが不要とあったのだが、どうもそのように記載しているサイトのほうが少ないように見える。
MSDNで確認したところ、そうあるべきではるが、ベンダー依存のため前提とするのはだめらしい。
Dispose should rollback the transaction. However, the behavior of Dispose is provider specific, and should not replace calling Rollback. https://msdn.microsoft.com/ja-jp/library/bf2cw321(v=vs.110).aspx
SqlTransactionだけならいいかもしれないが、OleDb(Access)やMySQLも共通化している今のコードでは駄目なようだ。try catch使うしかない。
https://msdn.microsoft.com/ja-jp/library/system.data.idbtransaction.rollback(v=vs.110).aspx</description>
    </item>
    
    <item>
      <title>ClosedXMLの画像追加におけるWorksheetの取り扱いについて</title>
      <link>https://blog.tack41.net/posts/2017/11/07_01/</link>
      <pubDate>Tue, 07 Nov 2017 10:20:41 +0000</pubDate>
      
      <guid>https://blog.tack41.net/posts/2017/11/07_01/</guid>
      <description>C#でClosedXMLを使用してExcelに画像を追加する処理をしていた際、なぜかWorkbookの保存時にObjectDisposedExceptionが発生するという事態になりました。
以下のようなコードです
 using (XLWorkbook wb = new XLWorkbook(filePath))  {  IXLWorksheet ws_src = wb.Worksheet(&amp;#34;Template&amp;#34;);   using (IXLWorksheet ws = ws_src.CopyTo(&amp;#34;1&amp;#34;))  {  var image = ws.AddPicture(imagePath1);  image.MoveTo(ws.Cell(3, 3).Address);  image.Scale(.5);   image = ws.AddPicture(imagePath2);  image.MoveTo(ws.Cell(20, 3).Address);  image.Scale(2);   }   using (IXLWorksheet ws = ws_src.CopyTo(&amp;#34;2&amp;#34;))  {  var image = ws.AddPicture(imagePath3);  image.MoveTo(ws.Cell(3, 3).Address);  image.Scale(.5);  }   ws_src.</description>
    </item>
    
  </channel>
</rss>
