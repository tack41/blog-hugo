<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ansible on tack41&#39;s blog</title>
    <link>https://blog.tack41.net/tags/ansible/</link>
    <description>Recent content in ansible on tack41&#39;s blog</description>
    <image>
      <url>https://blog.tack41.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.tack41.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 29 Sep 2022 00:00:00 +0900</lastBuildDate><atom:link href="https://blog.tack41.net/tags/ansible/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ChromebookでVisual Studio Code Server</title>
      <link>https://blog.tack41.net/posts/2022/09/29_01/</link>
      <pubDate>Thu, 29 Sep 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2022/09/29_01/</guid>
      <description>TL;DR Ansibleでvariableの存在チェックをしたい場合は var1 is defined and var1 is not none and var1 | length &amp;gt; 0 経緯 Ansibleのwhenで変数が定義されていて値が存在していたら実行したいケースがありました。
まず注意しなければいけないのは、この評価はPythonではなく、Jinja2で実行されるということ。このため
var1.length &amp;gt; 0 という表現は使えず
var1 | length &amp;gt; 0 とする必要があります。同様に
var1 is not None という表現は使えず(Jinja2エンジンではisはテストを指定するキーワードで、Noneというテストは存在しない。noneなら存在する)
var 1 is not none と指定する必要がある。
最初は、
var1 is defined and var1 | length &amp;gt; 0 くらいでやっていたのですが、変数は定義されているが値が未設定、という場合にvar1はNoneTypeという型になり、lengthが使えないため、最終的に
var1 is defined and var1 is not none and var1 | length &amp;gt; 0 という書き方に落ち着きました。</description>
    </item>
    
    <item>
      <title>Ansible変数未定義、または空の場合にfailさせる</title>
      <link>https://blog.tack41.net/posts/2022/09/30_01/</link>
      <pubDate>Tue, 20 Sep 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2022/09/30_01/</guid>
      <description>TL;DR Ansibleで複数の変数の存在チェック、文字列の場合は空のチェックをしたい場合は ansible.builtin.fail: msg: Varialbe &amp;#39;{{ item }}&amp;#39; is not defined or empty. when: &amp;gt; item is not defined or item is none or ( item is string and item | length == 0 ) loop: - var1 - var2 #nolog: true # Hide credencials, but suppress message. 経緯 Ansibleで引数が定義されていて、空でないかどうかチェックしたい。1個ずつやるのもだるいのでloopでまとめて。 以下でできるかと思ったのだが&amp;hellip;
ansible.builtin.fail: msg: Varialbe &amp;#39;{{ item }}&amp;#39; is not defined or empty. when: &amp;gt; item is not defined or item is none or item | length == 0 loop: - var1 - var2 これだと、変数に数字が設定されていると型がstringにはならず、lengthの実行でlen()メソッドがないと言われてこけてしまう。このため、以下のように型がstringかチェックしたうえでlengthチェックさせる。また、内容がパスワードなどを含む場合はno_log: trueとするとよい。ただしその場合エラー時のメッセージも簡略化されてどの変数でこけたのか、別途調査が必要となる。</description>
    </item>
    
    <item>
      <title>AD環境のWindowsをAnsibleで操作する(非AD環境)</title>
      <link>https://blog.tack41.net/posts/2021/11/25_01/</link>
      <pubDate>Thu, 25 Nov 2021 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2021/11/25_01/</guid>
      <description>TL;DR Active Directryに参加していないWindow10をWSL2のUbuntu20.04にインストールしたAnsibleで操作する環境を構築しました。kerberos認証が必要ない分、AD参加済みの環境よりは簡単な手順でした。
手順 Windows 10 WSL2を有効にし、Ubuntu20.04をインストール
リモート接続を受け付けるための設定(要管理者権限)
Invoke-WebRequest -Uri https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1 -OutFile ConfigureRemotingForAnsible.ps1 powershell -ExecutionPolicy RemoteSigned .\ConfigureRemotingForAnsible.ps1 Ubuntu20.04 最新のAnsibleをインストール
sudo apt update sudo apt install software-properties-common sudo apt-add-repository --yes --update ppa:ansible/ansible sudo apt install ansible https://docs.ansible.com/ansible/2.9_ja/installation_guide/intro_installation.html#ubuntu-ansible 以下のaptパッケージのインストール
python3-pip gcc pip3で以下のPythonライブラリをインストール
pywinrm inventory.ymlに以下の記述を記載
windows: hosts: 192.168.yy.yyy: ansible_connection: winrm ansible_user: user_name ansible_winrm_server_cert_validation: ignore ansible_winrm_transport: basic ansible_port: 5986 ansible -i inventory.yml 192.168.yyy.yyy -m win_ping が成功することを確認</description>
    </item>
    
    <item>
      <title>AD環境のWindowsをAnsibleで操作する</title>
      <link>https://blog.tack41.net/posts/2021/11/24_01/</link>
      <pubDate>Wed, 24 Nov 2021 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2021/11/24_01/</guid>
      <description>TL;DR Active Directryに参加しているWindow10をWSL2のUbuntu20.04にインストールしたAnsibleで操作する環境を構築しました。複雑な手順が必要ですが、操作できることを確認しました。
手順 Windows 10 WSL2を有効にし、Ubuntu20.04をインストール
リモート接続を受け付けるための設定(要管理者権限)
Invoke-WebRequest -Uri https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1 -OutFile ConfigureRemotingForAnsible.ps1 powershell -ExecutionPolicy RemoteSigned .\ConfigureRemotingForAnsible.ps1 Ubuntu20.04 最新のAnsibleをインストール
sudo apt update sudo apt install software-properties-common sudo apt-add-repository --yes --update ppa:ansible/ansible sudo apt install ansible https://docs.ansible.com/ansible/2.9_ja/installation_guide/intro_installation.html#ubuntu-ansible 以下のaptパッケージのインストール
python3-pip gcc python-dev libkrb5-dev krb5-user pip3で以下のPythonライブラリをインストール
pywinrm[kerberos] kerberos requests_kerberos pykerberos 以下の内容で/etc/krb5.confを修正
[libdefaults] default_realm = EXAMPLE.COM kdc_timesync = 1 ccache_type = 4 forwardable = true proxiable = true [realms] EXAMPLE.COM = { kdc = dc1.</description>
    </item>
    
    <item>
      <title>IaCの壁</title>
      <link>https://blog.tack41.net/posts/2020/07/12_01/</link>
      <pubDate>Sun, 12 Jul 2020 00:00:00 +0900</pubDate>
      
      <guid>https://blog.tack41.net/posts/2020/07/12_01/</guid>
      <description>社内のLinuxサーバは極力Ansibleで状態を管理し、サービスはDockerコンテナで運用している(DB除く)。いわゆるIaC(Infrastracture as Code)を実践しているつもり。 これの何が嬉しいかというと、正直なところ個人的にコマンド一発で全てが出来上がるのが楽しい、というところが大きかったりする。ピタゴラスイッチ、ルーブ・ゴールドバーグ・マシンを見ているような爽快感、とでも言うのだろうか。
そんな感覚はない場合、紙の手順書をコードに置き換えるのは面倒と感じるのもわかる。何が面倒かと言えばコードには曖昧さが許されないことだと思う。手順書は曖昧に書いて「言わなくてもわかるよね」という雰囲気で終わらせることもできるが、コードは書いたようにしか動かない。コードに落とすためには対象のプログラム・システムの仕様を正確に理解しないといけないし、何をもって正常とするのか、それはどんなケースでも正常と言えるのか、突き詰めて考えないといけない。この辺りが利用する組織や文化によって大きな壁になるのだと思う。
ただ、慣れてしまえばむしろ誰かが決めた書式・ルールに従って手順書を書く手間、変更された際に保守する手間もなくなるし、手元の仮想化環境などで簡単に再現してテストできる、最高の環境になる。</description>
    </item>
    
  </channel>
</rss>
